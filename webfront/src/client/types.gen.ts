// This file is auto-generated by @hey-api/openapi-ts

export type AdminMapTaskResp = {
	error?: number;
	data?: MapTaskDetails | null;
};

export type AdminUpdateUserStatusRequest = {
	user_id: number;
	status: number;
};

/**
 * Band statistics
 */
export type BandStatistics = {
	min: number;
	max: number;
	mean: number;
	count: number;
	sum: number;
	std: number;
	median: number;
	majority: number;
	minority: number;
	unique: number;
	histogram: Array<Array<number>>;
	valid_percent: number;
	masked_pixels: number;
	valid_pixels: number;
	[key: string]: unknown | number;
};

export type BaseModel = {
	[key: string]: unknown;
};

export type BaseResp = {
	error?: number;
};

export type Body_Auth_user_login = {
	grant_type?: string | null;
	username: string;
	password: string;
	scope?: string;
	client_id?: string | null;
	client_secret?: string | null;
};

/**
 * BoundingBox model.
 *
 * Ref: https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/tms/2DBoundingBox.yaml
 *
 * Code generated using https://github.com/koxudaxi/datamodel-code-generator/
 */
export type BoundingBox = {
	/**
	 * A 2D Point in the CRS indicated elsewhere
	 */
	lowerLeft: [number, number];
	/**
	 * A 2D Point in the CRS indicated elsewhere
	 */
	upperRight: [number, number];
	crs?: CRS | null;
	orderedAxes?: [string, string] | null;
};

/**
 * Dataset Bounding box
 */
export type Bounds = {
	bounds: [number, number, number, number];
	crs: string;
};

/**
 * Model for colormap list.
 */
export type ColorMapsList = {
	colorMaps: Array<string>;
	links: Array<Link>;
};

export type ConstraintFactor = {
	kind: string;
	value: number;
};

export type CreateMapTaskReq = {
	name: string;
	district_code: string;
	constraint_factors: Array<ConstraintFactor>;
	suitability_factors: Array<SuitabilityFactor>;
};

/**
 * CRS model.
 *
 * Ref: https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/common-geodata/crs.yaml
 *
 * Code generated using https://github.com/koxudaxi/datamodel-code-generator/
 */
export type CRS = string | CRSUri | CRSWKT | CRSRef;

/**
 * CRS from referenceSystem.
 */
export type CRSRef = {
	/**
	 * A reference system data structure as defined in the MD_ReferenceSystem of the ISO 19115
	 */
	referenceSystem: {
		[key: string]: unknown;
	};
};

/**
 * Coordinate Reference System (CRS) from URI.
 */
export type CRSUri = {
	/**
	 * Reference to one coordinate reference system (CRS) as URI
	 */
	uri: string;
};

/**
 * Coordinate Reference System (CRS) from WKT encoded as PROJJSON Object.
 */
export type CRSWKT = {
	/**
	 * An object defining the CRS using the JSON encoding for Well-known text representation of coordinate reference systems 2.0
	 */
	wkt: {
		[key: string]: unknown;
	};
};

/**
 * Feature Model
 */
export type Feature = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "Feature";
	geometry:
		| (
				| Point_Input
				| MultiPoint
				| LineString
				| MultiLineString
				| Polygon
				| MultiPolygon
				| GeometryCollection_Input
		  )
		| null;
	properties:
		| {
				[key: string]: unknown;
		  }
		| BaseModel
		| null;
	id?: number | string | null;
};

export type Feature_Annotated_Union_Point__MultiPoint__LineString__MultiLineString__Polygon__MultiPolygon__GeometryCollection___FieldInfo_annotation_NoneType__required_True__discriminator__type____StatisticsInGeoJSON_ =
	{
		bbox?:
			| [number, number, number, number]
			| [number, number, number, number, number, number]
			| null;
		type: "Feature";
		geometry:
			| (
					| geojson_pydantic__geometries__Point
					| MultiPoint
					| LineString
					| MultiLineString
					| Polygon
					| MultiPolygon
					| GeometryCollection_Output
			  )
			| null;
		properties: StatisticsInGeoJSON | null;
		id?: number | string | null;
	};

export type Feature_Union_Polygon__MultiPolygon__Info_ = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "Feature";
	geometry: Polygon | MultiPolygon | null;
	properties: Info | null;
	id?: number | string | null;
};

/**
 * FeatureCollection Model
 */
export type FeatureCollection = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "FeatureCollection";
	features: Array<Feature>;
};

export type FeatureCollection_Feature_Annotated_Union_Point__MultiPoint__LineString__MultiLineString__Polygon__MultiPolygon__GeometryCollection___FieldInfo_annotation_NoneType__required_True__discriminator__type_____StatisticsInGeoJSON__ =
	{
		bbox?:
			| [number, number, number, number]
			| [number, number, number, number, number, number]
			| null;
		type: "FeatureCollection";
		features: Array<Feature_Annotated_Union_Point__MultiPoint__LineString__MultiLineString__Polygon__MultiPolygon__GeometryCollection___FieldInfo_annotation_NoneType__required_True__discriminator__type____StatisticsInGeoJSON_>;
	};

/**
 * Point Model
 */
export type geojson_pydantic__geometries__Point = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "Point";
	coordinates: Position2D | Position3D;
};

/**
 * GeometryCollection Model
 */
export type GeometryCollection_Input = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "GeometryCollection";
	geometries: Array<
		| Point_Input
		| MultiPoint
		| LineString
		| MultiLineString
		| Polygon
		| MultiPolygon
		| GeometryCollection_Input
	>;
};

/**
 * GeometryCollection Model
 */
export type GeometryCollection_Output = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "GeometryCollection";
	geometries: Array<
		| geojson_pydantic__geometries__Point
		| MultiPoint
		| LineString
		| MultiLineString
		| Polygon
		| MultiPolygon
		| GeometryCollection_Output
	>;
};

/**
 * Geospatial model.
 *
 * Ref: https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/tms/geospatialData.yaml
 *
 * Code generated using https://github.com/koxudaxi/datamodel-code-generator/
 */
export type GeospatialData = {
	/**
	 * Title of this tile matrix set, normally used for display to a human
	 */
	title?: string | null;
	/**
	 * Brief narrative description of this tile matrix set, normally available for display to a human
	 */
	description?: string | null;
	/**
	 * Unordered list of one or more commonly used or formalized word(s) or phrase(s) used to describe this layer
	 */
	keywords?: string | null;
	/**
	 * Unique identifier of the Layer. Implementation of 'identifier'
	 */
	id: string;
	/**
	 * Type of data represented in the tileset
	 */
	dataType: "map" | "vector" | "coverage";
	/**
	 * The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown
	 */
	geometryDimension?: number | null;
	/**
	 * Feature type identifier. Only applicable to layers of datatype 'geometries'
	 */
	featureType?: string | null;
	/**
	 * Short reference to recognize the author or provider
	 */
	attribution?: string | null;
	/**
	 * License applicable to the tiles
	 */
	license?: string | null;
	/**
	 * Useful information to contact the authors or custodians for the layer (e.g. e-mail address, a physical address,  phone numbers, etc)
	 */
	pointOfContact?: string | null;
	/**
	 * Organization or individual responsible for making the layer available
	 */
	publisher?: string | null;
	/**
	 * Category where the layer can be grouped
	 */
	theme?: string | null;
	crs?: CRS | null;
	/**
	 * Epoch of the Coordinate Reference System (CRS)
	 */
	epoch?: number | null;
	/**
	 * Minimum scale denominator for usage of the layer
	 */
	minScaleDenominator?: number | null;
	/**
	 * Maximum scale denominator for usage of the layer
	 */
	maxScaleDenominator?: number | null;
	/**
	 * Minimum cell size for usage of the layer
	 */
	minCellSize?: number | null;
	/**
	 * Maximum cell size for usage of the layer
	 */
	maxCellSize?: number | null;
	/**
	 * TileMatrix identifier associated with the minScaleDenominator
	 */
	maxTileMatrix?: string | null;
	/**
	 * TileMatrix identifier associated with the maxScaleDenominator
	 */
	minTileMatrix?: string | null;
	boundingBox?: BoundingBox | null;
	created?: TimeStamp | null;
	updated?: TimeStamp | null;
	style?: Style | null;
	/**
	 * URI identifying a class of data contained in this layer (useful to determine compatibility with styles or processes)
	 */
	geoDataClasses?: Array<string> | null;
	propertiesSchema?: PropertiesSchema | null;
	/**
	 * Links related to this layer. Possible link 'rel' values are: 'geodata' for a URL pointing to the collection of geospatial data.
	 */
	links?: Array<Link> | null;
};

/**
 * Type of data represented in the tileset
 */
export type dataType = "map" | "vector" | "coverage";

export type HTTPValidationError = {
	detail?: Array<ValidationError>;
};

/**
 * Available Output image type.
 */
export type ImageType =
	| "png"
	| "npy"
	| "tif"
	| "jpeg"
	| "jpg"
	| "jp2"
	| "webp"
	| "pngraw";

/**
 * Dataset Info.
 */
export type Info = {
	bounds: [number, number, number, number];
	crs: string;
	band_metadata: Array<
		[
			string,
			{
				[key: string]: unknown;
			},
		]
	>;
	band_descriptions: Array<[string, string]>;
	dtype: string;
	nodata_type: "Alpha" | "Mask" | "Internal" | "Nodata" | "None";
	colorinterp?: Array<string> | null;
	scales?: Array<number> | null;
	offsets?: Array<number> | null;
	colormap?: {
		[key: string]: [number, number, number, number];
	} | null;
	[key: string]: unknown | string;
};

export type nodata_type = "Alpha" | "Mask" | "Internal" | "Nodata" | "None";

/**
 * LineString Model
 */
export type LineString = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "LineString";
	coordinates: Array<Position2D | Position3D>;
};

/**
 * Link model.
 *
 * Ref: https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/common-core/link.yaml
 *
 * Code generated using https://github.com/koxudaxi/datamodel-code-generator/
 */
export type Link = {
	/**
	 * Supplies the URI to a remote resource (or resource fragment).
	 */
	href: string;
	/**
	 * The type or semantics of the relation.
	 */
	rel: string;
	/**
	 * A hint indicating what the media type of the result of dereferencing the link should be.
	 */
	type?: MediaType | null;
	/**
	 * This flag set to true if the link is a URL template.
	 */
	templated?: boolean | null;
	/**
	 * A base path to retrieve semantic information about the variables used in URL template.
	 */
	varBase?: string | null;
	/**
	 * A hint indicating what the language of the result of dereferencing the link should be.
	 */
	hreflang?: string | null;
	/**
	 * Used to label the destination of a link such that it can be used as a human-readable identifier.
	 */
	title?: string | null;
	length?: number | null;
};

export type MapTask = {
	id: number;
	name: string;
	user_id: number;
	user_email?: string | null;
	district_code: string;
	district_name?: string | null;
	status: number;
	status_desc?: string | null;
	started_at?: string | null;
	ended_at?: string | null;
	created_at: string;
};

export type MapTask4AdminPageData = {
	total?: number | null;
	current_page?: number | null;
	page_size?: number | null;
	error?: number;
	list?: Array<MapTask> | null;
};

export type MapTaskDetails = {
	id: number;
	name: string;
	user_id: number;
	user_email?: string | null;
	district_code: string;
	district_name?: string | null;
	status: number;
	status_desc?: string | null;
	started_at?: string | null;
	ended_at?: string | null;
	created_at: string;
	files?: Array<MapTaskFile>;
	constraint_factors?: Array<ConstraintFactor>;
	suitability_factors?: Array<SuitabilityFactor>;
};

export type MapTaskFile = {
	id: number;
	map_task_id: number;
	file_type: string;
	file_path: string;
	created_at: string;
};

export type MapTaskProgress = {
	id: number;
	map_task_id: number;
	percent: number;
	description?: string | null;
	phase?: string | null;
	error_msg?: string | null;
	created_at: string;
};

export type MapTaskProgressListResp = {
	error?: number;
	list: Array<MapTaskProgress>;
};

/**
 * Responses Media types formerly known as MIME types.
 */
export type MediaType =
	| "image/tiff; application=geotiff"
	| "image/jp2"
	| "image/png"
	| "image/jpeg"
	| "image/jpg"
	| "image/webp"
	| "application/x-binary"
	| "application/xml"
	| "application/json"
	| "application/geo+json"
	| "text/html"
	| "text/plain"
	| "application/x-protobuf"
	| "application/vnd.mapbox-vector-tile"
	| "application/ndjson"
	| "application/geo+json-seq"
	| "application/schema+json"
	| "text/csv"
	| "application/vnd.oai.openapi+json;version=3.0"
	| "application/vnd.oai.openapi;version=3.0"
	| "image/gif";

/**
 * MultiLineString Model
 */
export type MultiLineString = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "MultiLineString";
	coordinates: Array<Array<Position2D | Position3D>>;
};

/**
 * MultiPoint Model
 */
export type MultiPoint = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "MultiPoint";
	coordinates: Array<Position2D | Position3D>;
};

/**
 * MultiPolygon Model
 */
export type MultiPolygon = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "MultiPolygon";
	coordinates: Array<Array<Array<Position2D | Position3D>>>;
};

export type MyMapTaskListResp = {
	error?: number;
	list: Array<MapTaskDetails>;
};

export type MyMapTaskResp = {
	error?: number;
	data?: MapTaskDetails | null;
};

export type MyMapTaskTileSignature = {
	exp: number;
	task: number;
	sig: string;
};

export type MyMapTaskTileSignatureResp = {
	error?: number;
	data: MyMapTaskTileSignature;
};

export type OidcInfoResp = {
	login_url: string;
};

export type OidcTokenRequest = {
	code: string;
};

/**
 * Point Model
 */
export type Point_Input = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "Point";
	coordinates: Position2D | Position3D;
};

/**
 * Polygon Model
 */
export type Polygon = {
	bbox?:
		| [number, number, number, number]
		| [number, number, number, number, number, number]
		| null;
	type: "Polygon";
	coordinates: Array<Array<Position2D | Position3D>>;
};

export type Position2D = [number, number];

export type Position3D = [number, number, number];

export type PostLoginResp = {
	access_token?: string | null;
	expires_in?: number | null;
	refresh_token?: string | null;
	token_type?: string | null;
	error?: number;
};

/**
 * Properties model.
 *
 * Ref: https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/tms/propertiesSchema.yaml
 *
 * Code generated using https://github.com/koxudaxi/datamodel-code-generator/
 */
export type Properties = {
	title?: string | null;
	/**
	 * Implements 'description'
	 */
	description?: string | null;
	type?:
		| "array"
		| "boolean"
		| "integer"
		| "null"
		| "number"
		| "object"
		| "string"
		| null;
	/**
	 * Implements 'acceptedValues'
	 */
	enum?: Array<unknown> | null;
	/**
	 * Complements implementation of 'type'
	 */
	format?: string | null;
	/**
	 * Implements 'mediaType'
	 */
	contentMediaType?: string | null;
	/**
	 * Implements 'range'
	 */
	maximum?: number | null;
	/**
	 * Implements 'range'
	 */
	exclusiveMaximum?: number | null;
	/**
	 * Implements 'range'
	 */
	minimum?: number | null;
	/**
	 * Implements 'range'
	 */
	exclusiveMinimum?: number | null;
	pattern?: string | null;
	/**
	 * Implements 'upperMultiplicity'
	 */
	maxItems?: number | null;
	/**
	 * Implements 'lowerMultiplicity'
	 */
	minItems?: number | null;
	observedProperty?: string | null;
	observedPropertyURI?: string | null;
	uom?: string | null;
	uomURI?: string | null;
};

/**
 * PropertiesSchema model.
 *
 * Ref: https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/tms/propertiesSchema.yaml
 *
 * Code generated using https://github.com/koxudaxi/datamodel-code-generator/
 */
export type PropertiesSchema = {
	type: "object";
	/**
	 * Implements 'multiplicity' by citing property 'name' defined as 'additionalProperties'
	 */
	required?: Array<string> | null;
	properties: {
		[key: string]: Properties;
	};
};

export type RegisterRequest = {
	email: string;
	password: string;
};

export type SelectOptionItem = {
	code: string;
	label: string;
};

export type SelectOptionListResp = {
	error?: number;
	list: Array<SelectOptionItem>;
};

/**
 * Statistics model in geojson response.
 */
export type StatisticsInGeoJSON = {
	statistics: {
		[key: string]: BandStatistics;
	};
	[key: string]: unknown | BandStatistics;
};

/**
 * Style model.
 *
 * Ref: https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/tms/style.yaml
 *
 * Code generated using https://github.com/koxudaxi/datamodel-code-generator/
 */
export type Style = {
	/**
	 * An identifier for this style. Implementation of 'identifier'
	 */
	id: string;
	/**
	 * A title for this style
	 */
	title?: string | null;
	/**
	 * Brief narrative description of this style
	 */
	description?: string | null;
	/**
	 * keywords about this style
	 */
	keywords?: Array<string> | null;
	/**
	 * Links to style related resources. Possible link 'rel' values are: 'style' for a URL pointing to the style description, 'styleSpec' for a URL pointing to the specification or standard used to define the style.
	 */
	links?: Array<Link> | null;
};

export type SuitabilityFactor = {
	kind: string;
	weight: number;
	ranges: Array<SuitabilityFactorRange>;
};

export type SuitabilityFactorRange = {
	start: number;
	end: number;
	points: number;
};

/**
 * TileJSON model.
 *
 * Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0
 */
export type TileJSON = {
	tilejson?: string;
	name?: string | null;
	description?: string | null;
	version?: string;
	attribution?: string | null;
	template?: string | null;
	legend?: string | null;
	scheme?: "xyz" | "tms";
	tiles: Array<string>;
	grids?: Array<string> | null;
	data?: Array<string> | null;
	minzoom?: number;
	maxzoom?: number;
	bounds?: Array<number>;
	center?: [number, number, number] | null;
};

export type scheme = "xyz" | "tms";

/**
 * The limits for an individual tile matrix of a TileSet's TileMatrixSet, as defined in the OGC 2D TileMatrixSet and TileSet Metadata Standard
 *
 * Based on https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/tms/tileMatrixLimits.yaml
 */
export type TileMatrixLimits = {
	tileMatrix: string;
	minTileRow: number;
	maxTileRow: number;
	minTileCol: number;
	maxTileCol: number;
};

/**
 * TilePoint model.
 *
 * Ref: https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/tms/tilePoint.yaml
 *
 * Code generated using https://github.com/koxudaxi/datamodel-code-generator/
 */
export type TilePoint = {
	coordinates: [number, number];
	crs: CRS | null;
	/**
	 * TileMatrix identifier associated with the scaleDenominator
	 */
	tileMatrix?: string | null;
	/**
	 * Scale denominator of the tile matrix selected
	 */
	scaleDenominator?: number | null;
	/**
	 * Cell size of the tile matrix selected
	 */
	cellSize?: number | null;
};

/**
 * TileSet model.
 *
 * Based on https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/tms/tileSet.yaml
 */
export type TileSet = {
	/**
	 * A title for this tileset
	 */
	title?: string | null;
	/**
	 * Brief narrative description of this tile set
	 */
	description?: string | null;
	/**
	 * Type of data represented in the tileset
	 */
	dataType: "map" | "vector" | "coverage";
	crs: CRS;
	/**
	 * Reference to a Tile Matrix Set on an official source for Tile Matrix Sets
	 */
	tileMatrixSetURI?: string | null;
	/**
	 * Links to related resources
	 */
	links: Array<Link>;
	/**
	 * Limits for the TileRow and TileCol values for each TileMatrix in the tileMatrixSet. If missing, there are no limits other that the ones imposed by the TileMatrixSet. If present the TileMatrices listed are limited and the rest not available at all
	 */
	tileMatrixSetLimits?: Array<TileMatrixLimits> | null;
	/**
	 * Epoch of the Coordinate Reference System (CRS)
	 */
	epoch?: number | null;
	layers?: Array<GeospatialData> | null;
	boundingBox?: BoundingBox | null;
	centerPoint?: TilePoint | null;
	style?: Style | null;
	/**
	 * Short reference to recognize the author or provider
	 */
	attribution?: string | null;
	/**
	 * License applicable to the tiles
	 */
	license?: string | null;
	/**
	 * Restrictions on the availability of the Tile Set that the user needs to be aware of before using or redistributing the Tile Set
	 */
	accessConstraints?:
		| "unclassified"
		| "restricted"
		| "confidential"
		| "secret"
		| "topSecret"
		| null;
	/**
	 * keywords about this tileset
	 */
	keywords?: Array<string> | null;
	/**
	 * Version of the Tile Set. Changes if the data behind the tiles has been changed
	 */
	version?: string | null;
	created?: TimeStamp | null;
	updated?: TimeStamp | null;
	/**
	 * Useful information to contact the authors or custodians for the Tile Set
	 */
	pointOfContact?: string | null;
	/**
	 * Media types available for the tiles
	 */
	mediaTypes?: Array<string> | null;
};

/**
 * TileSetList model.
 *
 * Based on https://docs.ogc.org/is/20-057/20-057.html#toc34
 */
export type TileSetList = {
	tilesets: Array<TileSet>;
};

/**
 * This property indicates the time and date when the response was generated using RFC 3339 notation.
 */
export type TimeStamp = string;

/**
 * Point model.
 *
 * response model for `/point` endpoints
 */
export type titiler__core__models__responses__Point = {
	coordinates: Array<number>;
	values: Array<number | null>;
	band_names: Array<string>;
};

export type Token = {
	access_token: string;
	token_type?: string;
};

export type User4Admin = {
	id?: number | null;
	provider?: string | null;
	sub?: string | null;
	email?: string | null;
	role?: number | null;
	status?: number | null;
	created_at?: string | null;
	last_login?: string | null;
};

export type User4AdminPageData = {
	total?: number | null;
	current_page?: number | null;
	page_size?: number | null;
	error?: number;
	list?: Array<User4Admin> | null;
};

export type UserPublic = {
	email: string;
	role?: number;
	status?: number;
	provider: string;
	sub: string;
	id: number;
};

export type ValidationError = {
	loc: Array<string | number>;
	msg: string;
	type: string;
};

export type AdminAdminGetUserListData = {
	currentPage?: number;
	keyword?: string | null;
	pageSize?: number;
	status?: number | null;
};

export type AdminAdminGetUserListResponse = User4AdminPageData;

export type AdminAdminUpdateUserStatusData = {
	requestBody: AdminUpdateUserStatusRequest;
};

export type AdminAdminUpdateUserStatusResponse = BaseResp;

export type AdminAdminGetMapTasksData = {
	currentPage?: number;
	name?: string | null;
	pageSize?: number;
	status?: number | null;
	userId?: number | null;
};

export type AdminAdminGetMapTasksResponse = MapTask4AdminPageData;

export type AdminAdminGetMapTaskData = {
	taskId: number;
};

export type AdminAdminGetMapTaskResponse = AdminMapTaskResp;

export type AuthUserLoginData = {
	formData: Body_Auth_user_login;
};

export type AuthUserLoginResponse = Token;

export type AuthGetUserInfoResponse = UserPublic;

export type AuthUserRegisterData = {
	requestBody: RegisterRequest;
};

export type AuthUserRegisterResponse = UserPublic;

export type AuthGetOidcInfoResponse = OidcInfoResp;

export type AuthGetOidcTokenData = {
	requestBody: OidcTokenRequest;
};

export type AuthGetOidcTokenResponse = PostLoginResp;

export type AuthUserTokenRefreshResponse = PostLoginResp;

export type AuthUserLogoutResponse = BaseResp;

export type GetBoundsData = {
	/**
	 * Coordinate Reference System.
	 */
	crs?: string | null;
	/**
	 * Dataset URL
	 */
	url: string;
};

export type GetBoundsResponse = Bounds;

export type GetInfoData = {
	/**
	 * Dataset URL
	 */
	url: string;
};

export type GetInfoResponse = Info;

export type GetInfoGeoJsonData = {
	/**
	 * Coordinate Reference System.
	 */
	crs?: string | null;
	/**
	 * Dataset URL
	 */
	url: string;
};

export type GetInfoGeoJsonResponse = Feature_Union_Polygon__MultiPolygon__Info_;

export type GetStatisticsData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * List of values for which to report counts.
	 */
	c?: Array<number> | null;
	/**
	 * Return statistics for categorical dataset. Defaults to `False`
	 */
	categorical?: boolean | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	height?: number | null;
	/**
	 *
	 * Defines the number of equal-width bins in the given range (10, by default).
	 *
	 * If bins is a sequence (comma `,` delimited values), it defines a monotonically increasing array of bin edges, including the rightmost edge, allowing for non-uniform bin widths.
	 *
	 * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
	 *
	 */
	histogramBins?: string | null;
	/**
	 *
	 * Comma `,` delimited range of the bins.
	 *
	 * The lower and upper range of the bins. If not provided, range is simply (a.min(), a.max()).
	 *
	 * Values outside the range are ignored. The first element of the range must be less than or equal to the second.
	 * range affects the automatic bin computation as well.
	 *
	 * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
	 *
	 */
	histogramRange?: string | null;
	maxSize?: number;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * List of percentile values (default to [2, 98]).
	 */
	p?: Array<number> | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width?: number | null;
};

export type GetStatisticsResponse = {
	[key: string]: BandStatistics;
};

export type PostStatisticsForGeoJsonData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * List of values for which to report counts.
	 */
	c?: Array<number> | null;
	/**
	 * Return statistics for categorical dataset. Defaults to `False`
	 */
	categorical?: boolean | null;
	/**
	 * Coordinate Reference System of the input coords. Default to `epsg:4326`.
	 */
	coordCrs?: string | null;
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	height?: number | null;
	/**
	 *
	 * Defines the number of equal-width bins in the given range (10, by default).
	 *
	 * If bins is a sequence (comma `,` delimited values), it defines a monotonically increasing array of bin edges, including the rightmost edge, allowing for non-uniform bin widths.
	 *
	 * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
	 *
	 */
	histogramBins?: string | null;
	/**
	 *
	 * Comma `,` delimited range of the bins.
	 *
	 * The lower and upper range of the bins. If not provided, range is simply (a.min(), a.max()).
	 *
	 * Values outside the range are ignored. The first element of the range must be less than or equal to the second.
	 * range affects the automatic bin computation as well.
	 *
	 * link: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
	 *
	 */
	histogramRange?: string | null;
	maxSize?: number | null;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * List of percentile values (default to [2, 98]).
	 */
	p?: Array<number> | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	requestBody: FeatureCollection | Feature;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width?: number | null;
};

export type PostStatisticsForGeoJsonResponse =
	| FeatureCollection_Feature_Annotated_Union_Point__MultiPoint__LineString__MultiLineString__Polygon__MultiPolygon__GeometryCollection___FieldInfo_annotation_NoneType__required_True__discriminator__type_____StatisticsInGeoJSON__
	| Feature_Annotated_Union_Point__MultiPoint__LineString__MultiLineString__Polygon__MultiPolygon__GeometryCollection___FieldInfo_annotation_NoneType__required_True__discriminator__type____StatisticsInGeoJSON_;

export type GetTileSetListData = {
	/**
	 * Coordinate Reference System.
	 */
	crs?: string | null;
	/**
	 * Dataset URL
	 */
	url: string;
};

export type GetTileSetListResponse = TileSetList;

export type GetTileSetData = {
	/**
	 * Identifier selecting one of the TileMatrixSetId supported.
	 */
	tileMatrixSetId:
		| "CDB1GlobalGrid"
		| "CanadianNAD83_LCC"
		| "EuropeanETRS89_LAEAQuad"
		| "GNOSISGlobalGrid"
		| "LINZAntarticaMapTilegrid"
		| "NZTM2000Quad"
		| "UPSAntarcticWGS84Quad"
		| "UPSArcticWGS84Quad"
		| "UTM31WGS84Quad"
		| "WGS1984Quad"
		| "WebMercatorQuad"
		| "WorldCRS84Quad"
		| "WorldMercatorWGS84Quad";
	/**
	 * Dataset URL
	 */
	url: string;
};

export type GetTileSetResponse = TileSet;

export type GetTileWithFormatAndScaleData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
	 */
	buffer?: number | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format: ImageType;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
	 */
	padding?: number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	scale: number;
	/**
	 * Identifier selecting one of the TileMatrixSetId supported.
	 */
	tileMatrixSetId:
		| "CDB1GlobalGrid"
		| "CanadianNAD83_LCC"
		| "EuropeanETRS89_LAEAQuad"
		| "GNOSISGlobalGrid"
		| "LINZAntarticaMapTilegrid"
		| "NZTM2000Quad"
		| "UPSAntarcticWGS84Quad"
		| "UPSArcticWGS84Quad"
		| "UTM31WGS84Quad"
		| "WGS1984Quad"
		| "WebMercatorQuad"
		| "WorldCRS84Quad"
		| "WorldMercatorWGS84Quad";
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	/**
	 * Column (X) index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix.
	 */
	x: number;
	/**
	 * Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix.
	 */
	y: number;
	/**
	 * Identifier (Z) selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile.
	 */
	z: number;
};

export type GetTileWithFormatAndScaleResponse = unknown;

export type GetTileWithScaleData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
	 */
	buffer?: number | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format?: ImageType;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
	 */
	padding?: number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	scale: number;
	/**
	 * Identifier selecting one of the TileMatrixSetId supported.
	 */
	tileMatrixSetId:
		| "CDB1GlobalGrid"
		| "CanadianNAD83_LCC"
		| "EuropeanETRS89_LAEAQuad"
		| "GNOSISGlobalGrid"
		| "LINZAntarticaMapTilegrid"
		| "NZTM2000Quad"
		| "UPSAntarcticWGS84Quad"
		| "UPSArcticWGS84Quad"
		| "UTM31WGS84Quad"
		| "WGS1984Quad"
		| "WebMercatorQuad"
		| "WorldCRS84Quad"
		| "WorldMercatorWGS84Quad";
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	/**
	 * Column (X) index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix.
	 */
	x: number;
	/**
	 * Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix.
	 */
	y: number;
	/**
	 * Identifier (Z) selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile.
	 */
	z: number;
};

export type GetTileWithScaleResponse = unknown;

export type GetTileWithFormatData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
	 */
	buffer?: number | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format: ImageType;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
	 */
	padding?: number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	scale?: number;
	/**
	 * Identifier selecting one of the TileMatrixSetId supported.
	 */
	tileMatrixSetId:
		| "CDB1GlobalGrid"
		| "CanadianNAD83_LCC"
		| "EuropeanETRS89_LAEAQuad"
		| "GNOSISGlobalGrid"
		| "LINZAntarticaMapTilegrid"
		| "NZTM2000Quad"
		| "UPSAntarcticWGS84Quad"
		| "UPSArcticWGS84Quad"
		| "UTM31WGS84Quad"
		| "WGS1984Quad"
		| "WebMercatorQuad"
		| "WorldCRS84Quad"
		| "WorldMercatorWGS84Quad";
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	/**
	 * Column (X) index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix.
	 */
	x: number;
	/**
	 * Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix.
	 */
	y: number;
	/**
	 * Identifier (Z) selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile.
	 */
	z: number;
};

export type GetTileWithFormatResponse = unknown;

export type GetTileData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
	 */
	buffer?: number | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format?: ImageType;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
	 */
	padding?: number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	scale?: number;
	/**
	 * Identifier selecting one of the TileMatrixSetId supported.
	 */
	tileMatrixSetId:
		| "CDB1GlobalGrid"
		| "CanadianNAD83_LCC"
		| "EuropeanETRS89_LAEAQuad"
		| "GNOSISGlobalGrid"
		| "LINZAntarticaMapTilegrid"
		| "NZTM2000Quad"
		| "UPSAntarcticWGS84Quad"
		| "UPSArcticWGS84Quad"
		| "UTM31WGS84Quad"
		| "WGS1984Quad"
		| "WebMercatorQuad"
		| "WorldCRS84Quad"
		| "WorldMercatorWGS84Quad";
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	/**
	 * Column (X) index of the tile on the selected TileMatrix. It cannot exceed the MatrixHeight-1 for the selected TileMatrix.
	 */
	x: number;
	/**
	 * Row (Y) index of the tile on the selected TileMatrix. It cannot exceed the MatrixWidth-1 for the selected TileMatrix.
	 */
	y: number;
	/**
	 * Identifier (Z) selecting one of the scales defined in the TileMatrixSet and representing the scaleDenominator the tile.
	 */
	z: number;
};

export type GetTileResponse = unknown;

export type GetMapViewerData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
	 */
	buffer?: number | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	/**
	 * Overwrite default maxzoom.
	 */
	maxzoom?: number | null;
	/**
	 * Overwrite default minzoom.
	 */
	minzoom?: number | null;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
	 */
	padding?: number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Default will be automatically defined if the output image needs a mask (png) or not (jpeg).
	 */
	tileFormat?: ImageType | null;
	/**
	 * Identifier selecting one of the TileMatrixSetId supported.
	 */
	tileMatrixSetId:
		| "CDB1GlobalGrid"
		| "CanadianNAD83_LCC"
		| "EuropeanETRS89_LAEAQuad"
		| "GNOSISGlobalGrid"
		| "LINZAntarticaMapTilegrid"
		| "NZTM2000Quad"
		| "UPSAntarcticWGS84Quad"
		| "UPSArcticWGS84Quad"
		| "UTM31WGS84Quad"
		| "WGS1984Quad"
		| "WebMercatorQuad"
		| "WorldCRS84Quad"
		| "WorldMercatorWGS84Quad";
	/**
	 * Tile size scale. 1=256x256, 2=512x512...
	 */
	tileScale?: number;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
};

export type GetMapViewerResponse = string;

export type GetWmtsData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
	 */
	buffer?: number | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	/**
	 * Overwrite default maxzoom.
	 */
	maxzoom?: number | null;
	/**
	 * Overwrite default minzoom.
	 */
	minzoom?: number | null;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
	 */
	padding?: number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Output image type. Default is png.
	 */
	tileFormat?: ImageType;
	/**
	 * Identifier selecting one of the TileMatrixSetId supported.
	 */
	tileMatrixSetId:
		| "CDB1GlobalGrid"
		| "CanadianNAD83_LCC"
		| "EuropeanETRS89_LAEAQuad"
		| "GNOSISGlobalGrid"
		| "LINZAntarticaMapTilegrid"
		| "NZTM2000Quad"
		| "UPSAntarcticWGS84Quad"
		| "UPSArcticWGS84Quad"
		| "UTM31WGS84Quad"
		| "WGS1984Quad"
		| "WebMercatorQuad"
		| "WorldCRS84Quad"
		| "WorldMercatorWGS84Quad";
	/**
	 * Tile size scale. 1=256x256, 2=512x512...
	 */
	tileScale?: number;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	/**
	 * Use EPSG code, not opengis.net, for the ows:SupportedCRS in the TileMatrixSet (set to True to enable ArcMap compatability)
	 */
	useEpsg?: boolean;
};

export type GetWmtsResponse = string;

export type GetTileJsonData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
	 */
	buffer?: number | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	/**
	 * Overwrite default maxzoom.
	 */
	maxzoom?: number | null;
	/**
	 * Overwrite default minzoom.
	 */
	minzoom?: number | null;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
	 */
	padding?: number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Default will be automatically defined if the output image needs a mask (png) or not (jpeg).
	 */
	tileFormat?: ImageType | null;
	/**
	 * Identifier selecting one of the TileMatrixSetId supported.
	 */
	tileMatrixSetId:
		| "CDB1GlobalGrid"
		| "CanadianNAD83_LCC"
		| "EuropeanETRS89_LAEAQuad"
		| "GNOSISGlobalGrid"
		| "LINZAntarticaMapTilegrid"
		| "NZTM2000Quad"
		| "UPSAntarcticWGS84Quad"
		| "UPSArcticWGS84Quad"
		| "UTM31WGS84Quad"
		| "WGS1984Quad"
		| "WebMercatorQuad"
		| "WorldCRS84Quad"
		| "WorldMercatorWGS84Quad";
	/**
	 * Tile size scale. 1=256x256, 2=512x512...
	 */
	tileScale?: number;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
};

export type GetTileJsonResponse = TileJSON;

export type GetDataForPointData = {
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * Coordinate Reference System of the input coords. Default to `epsg:4326`.
	 */
	coordCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	/**
	 * Latitude
	 */
	lat: number;
	/**
	 * Longitude
	 */
	lon: number;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
};

export type GetDataForPointResponse = titiler__core__models__responses__Point;

export type GetPreviewWithSizeAndFormatData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format: ImageType;
	height: number | null;
	maxSize?: number;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width: number | null;
};

export type GetPreviewWithSizeAndFormatResponse = unknown;

export type GetPreviewWithFormatData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format: ImageType;
	height?: number | null;
	maxSize?: number;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width?: number | null;
};

export type GetPreviewWithFormatResponse = unknown;

export type GetPreviewData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format?: ImageType;
	height?: number | null;
	maxSize?: number;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width?: number | null;
};

export type GetPreviewResponse = unknown;

export type GetDataForBoundingBoxWithSizesAndFormatData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Coordinate Reference System of the input coords. Default to `epsg:4326`.
	 */
	coordCrs?: string | null;
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format: ImageType;
	height: number | null;
	maxSize?: number | null;
	/**
	 * Bounding box max X
	 */
	maxx: number;
	/**
	 * Bounding box max Y
	 */
	maxy: number;
	/**
	 * Bounding box min X
	 */
	minx: number;
	/**
	 * Bounding box min Y
	 */
	miny: number;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width: number | null;
};

export type GetDataForBoundingBoxWithSizesAndFormatResponse = unknown;

export type GetDataForBoundingBoxWithFormatData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Coordinate Reference System of the input coords. Default to `epsg:4326`.
	 */
	coordCrs?: string | null;
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format: ImageType;
	height?: number | null;
	maxSize?: number | null;
	/**
	 * Bounding box max X
	 */
	maxx: number;
	/**
	 * Bounding box max Y
	 */
	maxy: number;
	/**
	 * Bounding box min X
	 */
	minx: number;
	/**
	 * Bounding box min Y
	 */
	miny: number;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width?: number | null;
};

export type GetDataForBoundingBoxWithFormatResponse = unknown;

export type PostDataForGeoJsonWithSizesAndFormatData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Coordinate Reference System of the input coords. Default to `epsg:4326`.
	 */
	coordCrs?: string | null;
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format: ImageType;
	height: number | null;
	maxSize?: number | null;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	requestBody: Feature;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width: number | null;
};

export type PostDataForGeoJsonWithSizesAndFormatResponse = unknown;

export type PostDataForGeoJsonWithFormatData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Coordinate Reference System of the input coords. Default to `epsg:4326`.
	 */
	coordCrs?: string | null;
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format: ImageType;
	height?: number | null;
	maxSize?: number | null;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	requestBody: Feature;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width?: number | null;
};

export type PostDataForGeoJsonWithFormatResponse = unknown;

export type PostDataForGeoJsonData = {
	/**
	 * Algorithm name
	 */
	algorithm?:
		| "hillshade"
		| "slope"
		| "contours"
		| "normalizedIndex"
		| "terrarium"
		| "terrainrgb"
		| "cast"
		| "ceil"
		| "floor"
		| "min"
		| "max"
		| "median"
		| "mean"
		| "std"
		| "var";
	/**
	 * Algorithm parameter
	 */
	algorithmParams?: string | null;
	/**
	 * Dataset band indexes
	 */
	bidx?: Array<number> | null;
	/**
	 * rio-color formula (info: https://github.com/mapbox/rio-color)
	 */
	colorFormula?: string | null;
	/**
	 * JSON encoded custom Colormap
	 */
	colormap?: string | null;
	/**
	 * Colormap name
	 */
	colormapName?:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Coordinate Reference System of the input coords. Default to `epsg:4326`.
	 */
	coordCrs?: string | null;
	/**
	 * Output Coordinate Reference System.
	 */
	dstCrs?: string | null;
	/**
	 * rio-tiler's band math expression
	 */
	expression?: string | null;
	format?: ImageType;
	height?: number | null;
	maxSize?: number | null;
	/**
	 * Overwrite internal Nodata value
	 */
	nodata?: string | number | null;
	/**
	 * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
	 */
	reproject?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "max"
		| "min"
		| "med"
		| "q1"
		| "q3"
		| "sum"
		| "rms"
		| null;
	requestBody: Feature;
	/**
	 * RasterIO resampling algorithm. Defaults to `nearest`.
	 */
	resampling?:
		| "nearest"
		| "bilinear"
		| "cubic"
		| "cubic_spline"
		| "lanczos"
		| "average"
		| "mode"
		| "gauss"
		| "rms"
		| null;
	/**
	 * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
	 */
	rescale?: Array<string> | null;
	/**
	 * Add mask to the output data. Defaults to `True`
	 */
	returnMask?: boolean | null;
	/**
	 * Apply internal Scale/Offset. Defaults to `False`.
	 */
	unscale?: boolean | null;
	/**
	 * Dataset URL
	 */
	url: string;
	width?: number | null;
};

export type PostDataForGeoJsonResponse = unknown;

export type GetColorMapListResponse = ColorMapsList;

export type GetColorMapData = {
	/**
	 * ColorMap name
	 */
	colorMapId:
		| "dense_r"
		| "delta"
		| "algae_r"
		| "ylorbr"
		| "oxy"
		| "copper"
		| "tab20c_r"
		| "cividis_r"
		| "solar"
		| "gnuplot"
		| "dark2_r"
		| "gist_yarg_r"
		| "balance_r"
		| "gist_earth"
		| "balance"
		| "jet"
		| "gist_heat"
		| "rdylgn"
		| "rainbow_r"
		| "turbid_r"
		| "magma_r"
		| "gist_stern_r"
		| "plasma"
		| "gnuplot2_r"
		| "rdylgn_r"
		| "matter"
		| "puor_r"
		| "cool"
		| "gist_gray_r"
		| "spectral"
		| "turbo_r"
		| "amp"
		| "gist_heat_r"
		| "accent"
		| "ice"
		| "brg"
		| "hsv_r"
		| "tab10"
		| "brg_r"
		| "ylgnbu"
		| "accent_r"
		| "coolwarm"
		| "winter_r"
		| "binary"
		| "bwr_r"
		| "wistia"
		| "bone"
		| "paired"
		| "rdylbu"
		| "inferno"
		| "summer_r"
		| "hot"
		| "gist_ncar"
		| "ylorbr_r"
		| "amp_r"
		| "tarn_r"
		| "orrd"
		| "bupu"
		| "dense"
		| "greens_r"
		| "hot_r"
		| "phase"
		| "ocean"
		| "plasma_r"
		| "afmhot_r"
		| "autumn"
		| "gist_stern"
		| "diff_r"
		| "prgn"
		| "tab20b_r"
		| "solar_r"
		| "cubehelix"
		| "prism"
		| "gnuplot_r"
		| "inferno_r"
		| "twilight_r"
		| "jet_r"
		| "brbg"
		| "autumn_r"
		| "afmhot"
		| "rain"
		| "purd_r"
		| "wistia_r"
		| "tab10_r"
		| "coolwarm_r"
		| "bugn_r"
		| "viridis"
		| "ylgn_r"
		| "gist_rainbow"
		| "rainbow"
		| "spring_r"
		| "puor"
		| "greys"
		| "pubu"
		| "dark2"
		| "bugn"
		| "phase_r"
		| "thermal_r"
		| "set2"
		| "flag_r"
		| "ylorrd_r"
		| "copper_r"
		| "spectral_r"
		| "prism_r"
		| "set3"
		| "ylgnbu_r"
		| "rain_r"
		| "brbg_r"
		| "terrain_r"
		| "pastel1_r"
		| "rdbu"
		| "bwr"
		| "set1"
		| "tab20b"
		| "blues_r"
		| "purples"
		| "terrain"
		| "gist_rainbow_r"
		| "haline"
		| "summer"
		| "tab20c"
		| "turbid"
		| "flag"
		| "twilight_shifted"
		| "gray_r"
		| "delta_r"
		| "nipy_spectral"
		| "topo_r"
		| "oranges_r"
		| "prgn_r"
		| "diff"
		| "set3_r"
		| "deep"
		| "ylorrd"
		| "cfastie"
		| "rplumbo"
		| "gray"
		| "deep_r"
		| "gist_yarg"
		| "twilight"
		| "rdbu_r"
		| "pink_r"
		| "reds"
		| "algae"
		| "speed_r"
		| "twilight_shifted_r"
		| "bone_r"
		| "cividis"
		| "set1_r"
		| "purples_r"
		| "rdgy_r"
		| "matter_r"
		| "gist_gray"
		| "cool_r"
		| "ice_r"
		| "speed"
		| "gist_ncar_r"
		| "rdgy"
		| "ylgn"
		| "oxy_r"
		| "pastel2_r"
		| "pastel2"
		| "nipy_spectral_r"
		| "tempo_r"
		| "haline_r"
		| "viridis_r"
		| "gnuplot2"
		| "pubu_r"
		| "bupu_r"
		| "pastel1"
		| "binary_r"
		| "greys_r"
		| "paired_r"
		| "orrd_r"
		| "gnbu"
		| "topo"
		| "pubugn"
		| "tempo"
		| "tab20_r"
		| "pink"
		| "gnbu_r"
		| "tab20"
		| "blues"
		| "rdpu_r"
		| "turbo"
		| "rdylbu_r"
		| "hsv"
		| "winter"
		| "magma"
		| "seismic"
		| "piyg"
		| "cmrmap_r"
		| "schwarzwald"
		| "gist_earth_r"
		| "cubehelix_r"
		| "piyg_r"
		| "seismic_r"
		| "thermal"
		| "cmrmap"
		| "purd"
		| "rdpu"
		| "oranges"
		| "set2_r"
		| "greens"
		| "ocean_r"
		| "spring"
		| "curl"
		| "tarn"
		| "curl_r"
		| "reds_r"
		| "pubugn_r";
	/**
	 * Return colorMap as Image.
	 */
	format?: ImageType | null;
	/**
	 * Image Height (default to 20px for horizontal or 256px for vertical).
	 */
	height?: number | null;
	/**
	 * Image Orientation.
	 */
	orientation?: "vertical" | "horizontal" | null;
	/**
	 * Image Width (default to 256px for horizontal or 20px for vertical).
	 */
	width?: number | null;
};

export type GetColorMapResponse =
	| {
			[key: string]: [number, number, number, number];
	  }
	| Array<[[number, number], [number, number, number, number]]>;

export type UserUserGetMyMapTasksData = {
	completed?: boolean | null;
};

export type UserUserGetMyMapTasksResponse = MyMapTaskListResp;

export type UserUserCreateMapTaskData = {
	requestBody: CreateMapTaskReq;
};

export type UserUserCreateMapTaskResponse = MyMapTaskResp;

export type UserUserGetMapTaskData = {
	taskId: number;
};

export type UserUserGetMapTaskResponse = MyMapTaskResp;

export type UserUserDeleteMapTaskData = {
	taskId: number;
};

export type UserUserDeleteMapTaskResponse = BaseResp;

export type UserUserCancelMapTaskData = {
	taskId: number;
};

export type UserUserCancelMapTaskResponse = BaseResp;

export type UserUserGetMapTaskTileSignatureData = {
	taskId: number;
};

export type UserUserGetMapTaskTileSignatureResponse =
	MyMapTaskTileSignatureResp;

export type UserUserDuplicateMapTaskData = {
	taskId: number;
};

export type UserUserDuplicateMapTaskResponse = BaseResp;

export type UserUserGetDistrictSelectOptionsData = {
	keyword?: string | null;
	limit?: number | null;
};

export type UserUserGetDistrictSelectOptionsResponse = SelectOptionListResp;

export type UserUserGetConstraintFactorsSelectOptionsData = {
	keyword?: string | null;
	limit?: number | null;
};

export type UserUserGetConstraintFactorsSelectOptionsResponse =
	SelectOptionListResp;

export type UserUserGetMapTaskProgressData = {
	taskId: number;
};

export type UserUserGetMapTaskProgressResponse = MapTaskProgressListResp;
