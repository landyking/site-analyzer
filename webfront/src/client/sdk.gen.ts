// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
	AdminAdminGetUserListData,
	AdminAdminGetUserListResponse,
	AdminAdminUpdateUserStatusData,
	AdminAdminUpdateUserStatusResponse,
	AdminAdminGetMapTasksData,
	AdminAdminGetMapTasksResponse,
	AdminAdminGetMapTaskData,
	AdminAdminGetMapTaskResponse,
	AuthUserLoginData,
	AuthUserLoginResponse,
	AuthGetUserInfoResponse,
	AuthUserRegisterData,
	AuthUserRegisterResponse,
	AuthGetOidcInfoResponse,
	AuthGetOidcTokenData,
	AuthGetOidcTokenResponse,
	AuthUserTokenRefreshResponse,
	AuthUserLogoutResponse,
	UserUserGetMyMapTasksData,
	UserUserGetMyMapTasksResponse,
	UserUserCreateMapTaskData,
	UserUserCreateMapTaskResponse,
	UserUserGetMapTaskData,
	UserUserGetMapTaskResponse,
	UserUserDeleteMapTaskData,
	UserUserDeleteMapTaskResponse,
	UserUserCancelMapTaskData,
	UserUserCancelMapTaskResponse,
	UserUserGetMapTaskTileSignatureData,
	UserUserGetMapTaskTileSignatureResponse,
	UserUserDuplicateMapTaskData,
	UserUserDuplicateMapTaskResponse,
	UserUserGetDistrictSelectOptionsData,
	UserUserGetDistrictSelectOptionsResponse,
	UserUserGetConstraintFactorsSelectOptionsData,
	UserUserGetConstraintFactorsSelectOptionsResponse,
	UserUserGetMapTaskProgressData,
	UserUserGetMapTaskProgressResponse,
} from "./types.gen";

export class AdminService {
	/**
	 * Get user list for admin
	 * @param data The data for the request.
	 * @param data.pageSize
	 * @param data.currentPage
	 * @param data.keyword
	 * @param data.status
	 * @returns User4AdminPageData Successful Response
	 * @throws ApiError
	 */
	public static adminGetUserList(
		data: AdminAdminGetUserListData = {},
	): CancelablePromise<AdminAdminGetUserListResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/admin/users",
			query: {
				page_size: data.pageSize,
				current_page: data.currentPage,
				keyword: data.keyword,
				status: data.status,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update user status for admin
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns BaseResp Successful Response
	 * @throws ApiError
	 */
	public static adminUpdateUserStatus(
		data: AdminAdminUpdateUserStatusData,
	): CancelablePromise<AdminAdminUpdateUserStatusResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/admin/user-status",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get map tasks for admin
	 * @param data The data for the request.
	 * @param data.pageSize
	 * @param data.currentPage
	 * @param data.name
	 * @param data.userId
	 * @param data.status
	 * @returns MapTask4AdminPageData Successful Response
	 * @throws ApiError
	 */
	public static adminGetMapTasks(
		data: AdminAdminGetMapTasksData = {},
	): CancelablePromise<AdminAdminGetMapTasksResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/admin/map-tasks",
			query: {
				page_size: data.pageSize,
				current_page: data.currentPage,
				name: data.name,
				user_id: data.userId,
				status: data.status,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get map task details for admin
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns AdminMapTaskResp Successful Response
	 * @throws ApiError
	 */
	public static adminGetMapTask(
		data: AdminAdminGetMapTaskData,
	): CancelablePromise<AdminAdminGetMapTaskResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/admin/map-tasks/{taskId}",
			path: {
				taskId: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class AuthService {
	/**
	 * Login with Local Users
	 * OAuth2 compatible token login, get an access token for future requests
	 * @param data The data for the request.
	 * @param data.formData
	 * @returns Token Successful Response
	 * @throws ApiError
	 */
	public static userLogin(
		data: AuthUserLoginData,
	): CancelablePromise<AuthUserLoginResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/user-login",
			formData: data.formData,
			mediaType: "application/x-www-form-urlencoded",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get user information
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static getUserInfo(): CancelablePromise<AuthGetUserInfoResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/user-info",
		});
	}

	/**
	 * Register a new user
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static userRegister(
		data: AuthUserRegisterData,
	): CancelablePromise<AuthUserRegisterResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/user-register",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get OIDC Information
	 * @returns OidcInfoResp Successful Response
	 * @throws ApiError
	 */
	public static getOidcInfo(): CancelablePromise<AuthGetOidcInfoResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/oidc-info",
		});
	}

	/**
	 * Use code to get OIDC token
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns PostLoginResp Successful Response
	 * @throws ApiError
	 */
	public static getOidcToken(
		data: AuthGetOidcTokenData,
	): CancelablePromise<AuthGetOidcTokenResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/oidc-token",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Refresh user token
	 * @returns PostLoginResp Successful Response
	 * @throws ApiError
	 */
	public static userTokenRefresh(): CancelablePromise<AuthUserTokenRefreshResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/user/token-refresh",
		});
	}

	/**
	 * Logout user
	 * @returns BaseResp Successful Response
	 * @throws ApiError
	 */
	public static userLogout(): CancelablePromise<AuthUserLogoutResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/user/logout",
		});
	}
}

export class UserService {
	/**
	 * Get user's map tasks
	 * @param data The data for the request.
	 * @param data.completed
	 * @returns MyMapTaskListResp Successful Response
	 * @throws ApiError
	 */
	public static userGetMyMapTasks(
		data: UserUserGetMyMapTasksData = {},
	): CancelablePromise<UserUserGetMyMapTasksResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/user/my-map-tasks",
			query: {
				completed: data.completed,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Create a new map task
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns MyMapTaskResp Successful Response
	 * @throws ApiError
	 */
	public static userCreateMapTask(
		data: UserUserCreateMapTaskData,
	): CancelablePromise<UserUserCreateMapTaskResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/user/my-map-tasks",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get a user's map task by id
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns MyMapTaskResp Successful Response
	 * @throws ApiError
	 */
	public static userGetMapTask(
		data: UserUserGetMapTaskData,
	): CancelablePromise<UserUserGetMapTaskResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/user/my-map-tasks/{taskId}",
			path: {
				taskId: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete a map task
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns BaseResp Successful Response
	 * @throws ApiError
	 */
	public static userDeleteMapTask(
		data: UserUserDeleteMapTaskData,
	): CancelablePromise<UserUserDeleteMapTaskResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/user/my-map-tasks/{taskId}",
			path: {
				taskId: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Cancel a map task
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns BaseResp Successful Response
	 * @throws ApiError
	 */
	public static userCancelMapTask(
		data: UserUserCancelMapTaskData,
	): CancelablePromise<UserUserCancelMapTaskResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/user/my-map-tasks/{taskId}/cancel",
			path: {
				taskId: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get a map task's tile signature
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns MyMapTaskTileSignatureResp Successful Response
	 * @throws ApiError
	 */
	public static userGetMapTaskTileSignature(
		data: UserUserGetMapTaskTileSignatureData,
	): CancelablePromise<UserUserGetMapTaskTileSignatureResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/user/my-map-tasks/{taskId}/tile-signature",
			path: {
				taskId: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Duplicate a map task
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns BaseResp Successful Response
	 * @throws ApiError
	 */
	public static userDuplicateMapTask(
		data: UserUserDuplicateMapTaskData,
	): CancelablePromise<UserUserDuplicateMapTaskResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/user/my-map-tasks/{taskId}/duplicate",
			path: {
				taskId: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get district select options
	 * @param data The data for the request.
	 * @param data.limit
	 * @param data.keyword
	 * @returns SelectOptionListResp Successful Response
	 * @throws ApiError
	 */
	public static userGetDistrictSelectOptions(
		data: UserUserGetDistrictSelectOptionsData = {},
	): CancelablePromise<UserUserGetDistrictSelectOptionsResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/user/select-options/district",
			query: {
				limit: data.limit,
				keyword: data.keyword,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get constraint factors select options
	 * @param data The data for the request.
	 * @param data.limit
	 * @param data.keyword
	 * @returns SelectOptionListResp Successful Response
	 * @throws ApiError
	 */
	public static userGetConstraintFactorsSelectOptions(
		data: UserUserGetConstraintFactorsSelectOptionsData = {},
	): CancelablePromise<UserUserGetConstraintFactorsSelectOptionsResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/user/select-options/constraint-factors",
			query: {
				limit: data.limit,
				keyword: data.keyword,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get progress of a map task
	 * @param data The data for the request.
	 * @param data.taskId
	 * @returns MapTaskProgressListResp Successful Response
	 * @throws ApiError
	 */
	public static userGetMapTaskProgress(
		data: UserUserGetMapTaskProgressData,
	): CancelablePromise<UserUserGetMapTaskProgressResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/user/my-map-tasks/{taskId}/progress",
			path: {
				taskId: data.taskId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}
}
