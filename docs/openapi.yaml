openapi: 3.0.3
info:
  title: "APIs for Site Analyzer"
  version: "1.0.0"
servers:
  - url: "http://localhost:3000"
    description: "Development server"
paths:
  /v1/user-login:
    post:
      summary: "Login with Local Users"
      operationId: "userLogin"
      tags:
        - Auth
      description: "OAuth2 compatible token login, get an access token for future requests"
      security: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: "User's email address"
                  format: email
                password:
                  type: string
                  format: password
              required:
                - username
                - password
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: Bad request, incorrect email or password, or inactive user
  /v1/user-register:
    post:
      summary: "Register a new user"
      operationId: "userRegister"
      tags:
        - Auth
      description: "Creates a new user account with the provided email and password."
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
        "400":
          description: Bad request, invalid input or user with email already exists
  /v1/test-token:
    post:
      summary: "Test access token"
      operationId: "testToken"
      tags:
        - Auth
      responses:
        "200":
          description: Successful token validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
        "401":
          description: Unauthorized, invalid token
  /v1/oidc-info:
    get:
      summary: "Get OIDC Information"
      operationId: "getOidcInfo"
      tags:
        - Auth
      responses:
        "200":
          description: Successful retrieval of OIDC information
          content:
            application/json:
              schema:
                type: object
                properties:
                  login_url:
                    type: string
                    description: The OIDC login URL
      security: []
  /v1/oidc-token:
    post:
      tags:
        - Auth
      summary: "Use code to get OIDC token"
      operationId: "getOidcToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The OIDC authorization code received after login
              required:
                - code
      responses:
        "200":
          description: Successful retrieval of OIDC token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostLoginResp"
      security: []
  /v1/user/token-refresh:
    post:
      summary: "Refresh user token"
      operationId: "userTokenRefresh"
      tags:
        - Auth
      responses:
        "200":
          description: Successful retrieval of user token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostLoginResp"
  /v1/user/logout:
    post:
      summary: "Logout user"
      operationId: "userLogout"
      tags:
        - Auth
      responses:
        "200":
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResp"
  /v1/user/my-map-tasks:
    get:
      summary: "Get user's map tasks"
      operationId: "userGetMyMapTasks"
      tags:
        - User
      parameters:
        - name: completed
          in: query
          description: "Filter for completed map tasks"
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Successful retrieval of user's map tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MyMapTaskListResp"
    post:
      summary: "Create a new map task"
      operationId: "userCreateMapTask"
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMapTaskReq"
      responses:
        "200":
          description: Successful creation of map task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MyMapTaskResp"
  /v1/user/my-map-tasks/{taskId}:
    get:
      summary: "Get user's map tasks"
      operationId: "userGetMapTask"
      tags:
        - User
      parameters:
        - name: taskId
          in: path
          required: true
          description: "The ID of the map task"
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful retrieval of user's map tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MyMapTaskResp"
  /v1/user/my-map-tasks/{taskId}/cancel:
    post:
      summary: "Cancel a map task"
      operationId: "userCancelMapTask"
      tags:
        - User
      parameters:
        - name: taskId
          in: path
          required: true
          description: "The ID of the map task to cancel"
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful cancellation of map task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResp"
  /v1/admin/users:
    get:
      summary: "Get user list for admin"
      operationId: "adminGetUserList"
      security: [OIDC: [admin]]
      tags:
        - Admin
      parameters:
        - $ref: "#/components/parameters/queryPageSize"
        - $ref: "#/components/parameters/queryCurrentPage"
        - $ref: "#/components/parameters/queryKeyword"
        - name: status
          in: query
          description: "Filter users by status"
          required: false
          schema:
            type: integer
            description: "1: Active, 2: Locked"
      responses:
        "200":
          description: Successful cancellation of map task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User4AdminPageData"
  /v1/admin/user-status:
    post:
      summary: "Update user status for admin"
      operationId: "adminUpdateUserStatus"
      security: [OIDC: [admin]]
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  format: int64
                  description: "The ID of the user to update"
                status:
                  type: integer
                  description: "1 for Active, 2 for Locked"
              required:
                - id
                - status
      responses:
        "200":
          description: Successful update of user status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseResp"
  /v1/admin/map-tasks:
    get:
      summary: "Get map tasks for admin"
      operationId: "adminGetMapTasks"
      security: [OIDC: [admin]]
      tags:
        - Admin
      parameters:
        - $ref: "#/components/parameters/queryPageSize"
        - $ref: "#/components/parameters/queryCurrentPage"
        - name: name
          in: query
          description: "Filter map tasks by name"
          required: false
          schema:
            type: string
            description: "Name of the map task"
        - name: user_id
          in: query
          description: "Filter map tasks by user ID"
          required: false
          schema:
            type: integer
            format: int64
            description: "ID of the user who created the map task"
        - name: status
          in: query
          description: "Filter map tasks by status"
          required: false
          schema:
            type: integer
            description: "1: Created, 2: Processing, 3: Success, 4: Failure, 5: Cancelled"
      responses:
        "200":
          description: Successful retrieval of map tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapTask4AdminPageData"
  /v1/admin/map-tasks/{taskId}:
    get:
      summary: "Get map task details for admin"
      operationId: "AdminGetMapTask"
      tags:
        - Admin
      security: [OIDC: [admin]]
      parameters:
        - name: taskId
          in: path
          required: true
          description: "The ID of the map task"
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful retrieval of map task details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminMapTaskResp"
components:
  parameters:
    queryKeyword:
      name: keyword
      in: query
      description: "Search keyword for filtering results"
      required: false
      schema:
        type: string
    queryPageSize:
      name: page_size
      in: query
      description: "Number of items per page"
      required: false
      schema:
        type: integer
        default: 20
    queryCurrentPage:
      name: current_page
      in: query
      description: "Page number for pagination"
      required: false
      schema:
        type: integer
        default: 1 
  schemas:
    BaseResp:
      type: object
      properties:
        error:
          type: integer
          description: 0 for success, other values for business errors
    PageData:
      allOf:
        - $ref: "#/components/schemas/BaseResp"
        - type: object
          properties:
            total:
              type: integer
              format: int64
              description: Total number of items
            current_page:
              type: integer
              format: int64
              description: Current page number
            page_size:
              type: integer
              format: int64
              description: Number of items per page
    LoginResult:
      type: object
      properties:
        access_token:
          type: string
          description: The OIDC access token
        expires_in:
          type: integer
          description: The number of seconds until the token expires
        refresh_token:
          type: string
          description: The OIDC refresh token
        token_type:
          type: string
          description: The type of the token
    Token:
      type: object
      properties:
        access_token:
          type: string
          description: Access token for authentication
        token_type:
          type: string
          description: Type of the token, default is "bearer"
          default: "bearer"
      required:
        - access_token
    PostLoginResp:
      allOf:
        - $ref: "#/components/schemas/BaseResp"
        - $ref: "#/components/schemas/LoginResult"
    MapTask:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the map task
        name:
          type: string
          description: The name of the map task
        user_id:
          type: integer
          format: int64
          description: The ID of the user who created the map task
        user_email:
          type: string
          format: email
          description: The email of the user who created the map task
        district_code:
          type: string
          description: The code of the district associated with the map task
        district_name:
          type: string
          description: The name of the district associated with the map task
        status:
          type: integer
          description: |
            The status of the map task.
            1: Created
            2: Processing
            3: Success
            4: Failure
            5: Cancelled
          enum: [1,2,3,4,5]
        started_at:
          type: string
          format: date-time
        ended_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
          description: The creation time of the map task
    MapTaskFile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the map task file
        map_task_id:
          type: integer
          format: int64
          description: The ID of the associated map task
        file_type:
          type: string
          description: The type of the file
        file_path:
          type: string
          description: The path to the file
        created_at:
          type: string
          format: date-time
          description: The creation time of the map task file
    ConstraintFactor:
      type: object
      properties:
        kind:
          type: string
          description: The kind of constraint factor
        value:
          type: number
          description: The value of the constraint factor
      required:
        - kind
        - value
    SuitabilityFactorRange:
      type: object
      properties:
        start:
          type: number
          description: The start of the range for the suitability factor
        end:
          type: number
          description: The end of the range for the suitability factor
        points:
          type: integer
          description: The number of points in the range
      required:
        - start
        - end
        - points
    SuitabilityFactor:
      type: object
      properties:
        kind:
          type: string
          description: The kind of suitability factor
        weight:
          type: number
          description: The weight of the suitability factor
        ranges:
          type: array
          items:
            $ref: "#/components/schemas/SuitabilityFactorRange"
          description: List of ranges for the suitability factor
          minItems: 1
      required:
        - kind
        - weight
        - ranges
    MapTaskDetails:
      allOf:
        - $ref: "#/components/schemas/MapTask"
        - type: object
          properties:
            files:
              type: array
              items:
                $ref: "#/components/schemas/MapTaskFile"
            constraint_factors:
              type: array
              items:
                $ref: "#/components/schemas/ConstraintFactor"
              description: List of constraint factors for the map task
            suitability_factors:
              type: array
              items:
                $ref: "#/components/schemas/SuitabilityFactor"
              description: List of suitability factors for the map task
      
    MyMapTaskListResp:
      allOf:
        - $ref: "#/components/schemas/BaseResp"
        - type: object
          properties:
            list:
              type: array
              items:
                $ref: "#/components/schemas/MapTask"
    MyMapTaskResp:
      allOf:
        - $ref: "#/components/schemas/BaseResp"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/MapTaskDetails"
    AdminMapTaskResp:
      allOf:
        - $ref: "#/components/schemas/BaseResp"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/MapTaskDetails"
    CreateMapTaskReq:
      type: object
      properties:
        name:
          type: string
          description: The name of the map task
        district_code:
          type: string
          description: The code of the district associated with the map task
        constraint_factors:
          type: array
          items:
            $ref: "#/components/schemas/ConstraintFactor"
          description: List of constraint factors for the map task
        suitability_factors:
          type: array
          items:
            $ref: "#/components/schemas/SuitabilityFactor"
          description: List of suitability factors for the map task
      required:
        - name
        - district_code
        - constraint_factors
        - suitability_factors
    User4Admin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the user
        provider:
          type: string
          description: The OIDC provider name (e.g., 'cognito', 'keycloak')
        sub:
          type: string
          description: The OIDC subject identifier
        email:
          type: string
          format: email
          description: The user's email address
        role:
          type: integer
          description: The user's role (1 for ADMIN, 2 for USER)
        status:
          type: integer
          description: User status (1 for Active, 2 for Locked)
        created_at:
          type: string
          format: date-time
          description: The creation time of the user account
        last_login:
          type: string
          format: date-time
          description: The last login time of the user
    User4AdminPageData:
      allOf:
        - $ref: "#/components/schemas/PageData"
        - type: object
          properties:
            list:
              type: array
              items:
                $ref: "#/components/schemas/User4Admin"
    MapTask4AdminPageData:
      allOf:
        - $ref: "#/components/schemas/PageData"
        - type: object
          properties:
            list:
              type: array
              items:
                $ref: "#/components/schemas/MapTask"
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          minLength: 8
          maxLength: 40
      required:
        - email
        - password
    UserRole:
      type: integer
      enum: [1, 2]
      description: "1: ADMIN, 2: USER"
    UserStatus:
      type: integer
      enum: [1, 2]
      description: "1: ACTIVE, 2: LOCKED"
    UserPublic:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        role:
          $ref: "#/components/schemas/UserRole"
        status:
          $ref: "#/components/schemas/UserStatus"
        provider:
          type: string
        sub:
          type: string
      required:
        - id
        - email
        - role
        - status
        - provider
        - sub

  securitySchemes:
    OIDC:
      type: openIdConnect
      openIdConnectUrl: https://accounts.google.com/.well-known/openid-configuration
security:
  - OIDC: [user]
